module main
author unknown
version 1 0 
description ''

  spec ' ' 'impulse' 'drive _ _ _' 'auto auto auto' 0 1 200
  spec ' ' 'doremifa_vvf' 'doremifa_vvf'
  spec ' ' 'hbd' 'hbd _ _' 'auto auto' 60 0
  spec ' ' 'the_connection' 'the_connection'

to doremifa_vvf {
  digitalWriteOp 2 false
  'attach buzzer to pin' 0
  'play tone' 'nt;c' 3 1000
  'play tone' 'nt;d' 3 300
  'play tone' 'nt;e' 3 300
  'play tone' 'nt;f' 3 300
  'play tone' 'nt;g' 3 300
  'play tone' 'nt;g' 3 3000
  digitalWriteOp 2 true
}

to hbd time pin {
  digitalWriteOp 2 false
  'attach buzzer to pin' pin
  'play tone' 'nt;d' 3 (time * 5)
  'play tone' 'nt;d' 3 (time * 5)
  'play tone' 'nt;e' 3 (time * 10)
  'play tone' 'nt;d' 3 (time * 10)
  'play tone' 'nt;g' 3 (time * 10)
  waitMillis (time * 1)
  'play tone' 'nt;f#' 3 (time * 15)
  waitMillis (time * 1)
  'play tone' 'nt;d' 3 (time * 5)
  'play tone' 'nt;d' 3 (time * 5)
  'play tone' 'e' 3 (time * 10)
  'play tone' 'nt;d' 3 (time * 10)
  'play tone' 'nt;a' 3 (time * 10)
  waitMillis (time * 1)
  'play tone' 'nt;g' 3 (time * 15)
  waitMillis (time * 1)
  'play tone' 'nt;d' 3 (time * 5)
  'play tone' 'nt;d' 3 (time * 5)
  'play tone' 'nt;d' 4 (time * 10)
  'play tone' 'nt;b' 3 (time * 10)
  waitMillis (time * 1)
  'play tone' 'nt;g' 3 (time * 5)
  'play tone' 'nt;g' 3 (time * 5)
  'play tone' 'nt;f#' 3 (time * 10)
  'play tone' 'nt;e' 3 (time * 10)
  waitMillis (time * 1)
  'play tone' 'nt;c' 4 (time * 5)
  'play tone' 'nt;c' 4 (time * 5)
  'play tone' 'nt;b' 3 (time * 10)
  'play tone' 'nt;g' 3 (time * 10)
  'play tone' 'nt;a' 3 (time * 10)
  waitMillis (time * 1)
  'play tone' 'nt;g' 3 (time * 15)
  digitalWriteOp 2 true
}

to impulse axis delay steps {
  if (axis == 0) {
    digitalWriteOp 2 false
    if (steps > 0) {
      digitalWriteOp 4 true
    }
    if (steps <= 0) {
      digitalWriteOp 4 false
    }
    repeat (absoluteValue steps) {
      digitalWriteOp 0 false
      waitMillis (absoluteValue delay)
      digitalWriteOp 0 true
      waitMillis (absoluteValue delay)
    }
    digitalWriteOp 2 true
  }
  if (axis == 1) {
    digitalWriteOp 2 false
    if (steps > 0) {
      digitalWriteOp 17 true
    }
    if (steps <= 0) {
      digitalWriteOp 17 false
    }
    repeat (absoluteValue steps) {
      digitalWriteOp 16 false
      waitMillis (absoluteValue delay)
      digitalWriteOp 16 true
      waitMillis (absoluteValue delay)
    }
    digitalWriteOp 2 true
  }
  if (axis == 2) {
    digitalWriteOp 2 false
    if (steps > 0) {
      digitalWriteOp 12 true
    }
    if (steps <= 0) {
      digitalWriteOp 12 false
    }
    repeat (absoluteValue steps) {
      digitalWriteOp 13 false
      waitMillis (absoluteValue delay)
      digitalWriteOp 13 true
      waitMillis (absoluteValue delay)
    }
    digitalWriteOp 2 true
  }
  if (axis == 3) {
    digitalWriteOp 2 false
    if (steps > 0) {
      digitalWriteOp 27 true
    }
    if (steps <= 0) {
      digitalWriteOp 27 false
    }
    repeat (absoluteValue steps) {
      digitalWriteOp 14 false
      waitMillis (absoluteValue delay)
      digitalWriteOp 14 true
      waitMillis (absoluteValue delay)
    }
    digitalWriteOp 2 true
  }
  if (axis == 4) {
    digitalWriteOp 2 false
    if (steps > 0) {
      digitalWriteOp 25 false
    }
    if (steps <= 0) {
      digitalWriteOp 25 true
    }
    repeat (absoluteValue steps) {
      digitalWriteOp 26 false
      waitMillis (absoluteValue delay)
      digitalWriteOp 26 true
      waitMillis (absoluteValue delay)
    }
    digitalWriteOp 2 true
  }
  if (axis == 5) {
    digitalWriteOp 2 false
    if (steps > 0) {
      digitalWriteOp 32 true
    }
    if (steps <= 0) {
      digitalWriteOp 32 false
    }
    repeat (absoluteValue steps) {
      digitalWriteOp 33 false
      waitMillis (absoluteValue delay)
      digitalWriteOp 33 true
      waitMillis (absoluteValue delay)
    }
    digitalWriteOp 2 true
  }
}

to the_connection {
  digitalWriteOp 2 false
  'attach buzzer to pin' 0
  repeat 2 {
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;a#' 3 250
    'play tone' 'nt;d#' 3 500
    waitMillis 100
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;g#' 3 250
    'play tone' 'nt;d#' 3 250
    waitMillis 100
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;a#' 3 250
    'play tone' 'nt;d#' 3 250
    waitMillis 100
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;g#' 3 250
    'play tone' 'nt;a#' 3 500
    waitMillis 50
  }
  repeat 2 {
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;a#' 3 250
    'play tone' 'nt;d#' 3 500
    waitMillis 100
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;g#' 3 250
    'play tone' 'nt;d#' 3 250
    waitMillis 100
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;a#' 3 250
    'play tone' 'nt;d#' 3 250
    waitMillis 100
    'play tone' 'nt;d#' 3 250
    'play tone' 'nt;c#' 4 250
    'play tone' 'nt;d#' 4 500
    waitMillis 50
  }
  digitalWriteOp 2 true
}

script 1109 50 {
sendBroadcast 'R_CW'
comment 'R CW'
}

script 1314 51 {
impulse 5 5 50
comment 'Open Gripper'
}

script 898 56 {
sendBroadcast 'P_UP'
comment 'P UP'
}

script 478 58 {
impulse 1 5 -50
comment 'Shoulder UP'
}

script 688 58 {
sendBroadcast 'E_UP'
comment 'Elbow UP'
}

script 281 61 {
impulse 0 5 -50
comment 'Basee CW'
}

script 50 65 {
digitalWriteOp 2 true
comment 'Power OFF Drrivers'
}

script 1311 131 {
impulse 5 5 -50
comment 'Close Gripper'
}

script 1112 134 {
sendBroadcast 'R_CCW'
comment 'R CCW'
}

script 282 138 {
impulse 0 5 50
comment 'Base CCW'
}

script 685 138 {
sendBroadcast 'E_DN'
comment 'Elbow DN'
}

script 479 140 {
impulse 1 5 50
comment 'Shoulder DN'
}

script 896 141 {
sendBroadcast 'P_DN'
comment 'P UP'
}

script 1117 215 {
whenBroadcastReceived 'R_CW'
impulse 3 5 50
}

script 279 223 {
whenStarted
sendBroadcast 'go!'
}

script 694 224 {
whenBroadcastReceived 'E_UP'
impulse 2 5 50
}

script 899 224 {
whenBroadcastReceived 'P_UP'
impulse 3 5 -50
}

script 471 326 {
whenBroadcastReceived 'go!'
}

script 1109 326 {
whenBroadcastReceived 'R_CW'
impulse 4 5 50
}

script 274 328 {
whenBroadcastReceived 'go!'
impulse 1 5 100
impulse 1 5 -100
impulse 2 5 100
impulse 2 5 -100
impulse 2 5 -100
impulse 2 5 100
impulse 1 5 -100
impulse 1 5 100
waitMillis 500
}

script 65 331 {
whenBroadcastReceived 'go!'
impulse 0 5 200
impulse 0 5 -200
impulse 0 5 -200
impulse 0 5 200
waitMillis 500
}

script 896 332 {
whenBroadcastReceived 'P_UP'
impulse 4 5 50
}

script 691 339 {
whenBroadcastReceived 'E_UP'
impulse 5 5 -50
}

script 1115 443 {
whenBroadcastReceived 'R_CCW'
impulse 3 5 -50
}

script 906 452 {
whenBroadcastReceived 'P_DN'
impulse 3 5 50
}

script 689 454 {
whenBroadcastReceived 'E_DN'
impulse 2 5 -50
}

script 1112 555 {
whenBroadcastReceived 'R_CCW'
impulse 4 5 -50
}

script 900 561 {
whenBroadcastReceived 'P_DN'
impulse 4 5 -50
}

script 689 566 {
whenBroadcastReceived 'E_DN'
impulse 5 5 50
}


module 'LED Display' Output
author MicroBlocks
version 1 9 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' 'led_displayImage' 'display image _ : x _ y _' 'menu.led_imageMenu num num' 'happy' 1 1
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'
  space
  spec 'r' '_led_image' 'led image _' 'microbitDisplay' 15237440
  spec 'r' '_led_namedImage' '_led_namedImage _' 'menu.led_imageMenu' 'happy'
  spec 'r' '_led_imageData' '_led_imageData'
  spec ' ' 'set display color' 'set display color _' 'color'

to '_led_image' twentyFiveBitInt {
  comment 'An LED image is a 25-bit integer'
  return twentyFiveBitInt
}

to '_led_imageData' {
  return 'heart:4685802,small heart:145728,yes:2269696,no:18157905,happy:15237440,sad:18284864,confused:22348096,angry:23036241,asleep:459616,surprised:4526090,silly:25984017,fabulous:15008639,meh:2236443,t-shirt:15154043,roller skate:11534104,duck:489702,house:10976708,tortoise:359872,butterfly:29332475,stick figure:18158564,ghost:23068334,sword:4657284,giraffe:10946627,skull:15171246,umbrella:6460398,snake:469859,rabbit:16104613,cow:4685361,quarter note:7573636,eight note:7590276,pitchfork:4357813,target:4681156,triangle:1026176,left triangle:32805985,chess board:11184810,diamond:4539716,small diamond:141440,square:33080895,small square:469440,scissors:20287859,'
}

to '_led_namedImage' name {
  local 'data' ('_led_imageData')
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    comment 'Name not found'
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ',' data i) - 1)
  return ('[data:convertType]' ('[data:copyFromTo]' data start end) 'number')
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to led_displayImage imageName optionalX optionalY {
  local 'image' imageName
  if (isType image 'string') {
    image = ('_led_namedImage' imageName)
  }
  '[display:mbDrawShape]' image (argOrDefault 2 1) (argOrDefault 3 1)
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to 'set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}


module Tone Output
author MicroBlocks
version 1 9 
tags tone sound music audio note speaker 
choices tone_NoteName 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 
description 'Audio tone generation. Make music with MicroBlocks!
'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'nt;c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  space
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  space
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  space
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'
  spec ' ' '_tone init note names' '_tone init note names'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  'normalized note' = (ifExpression ((at 1 (v 'normalized note')) == 'n') (v 'normalized note') ('[data:join]' 'nt;' (v 'normalized note')))
  '_tone init note names'
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_tone init note names' {
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 'nt;c_' 'nt;db' 'nt;d_' 'nt;eb' 'nt;e_' 'nt;e#' 'nt;f_' 'nt;gb' 'nt;g_' 'nt;ab' 'nt;a_' 'nt;bb' 'nt;b_' 'nt;b#')
    _toneArezzoNotes = ('[data:makeList]' 'nt;do' 'nt;do#' 'nt;re' 'nt;re#' 'nt;mi' 'nt;fa' 'nt;fa#' 'nt;sol' 'nt;sol#' 'nt;la' 'nt;la#' 'nt;si' 'nt;do_' 'nt;dob' 'nt;re_' 'nt;reb' 'nt;mi_' 'nt;mi#' 'nt;fa_' 'nt;solb' 'nt;sol_' 'nt;lab' 'nt;la_' 'nt;sib' 'nt;si_' 'nt;si#')
  }
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}

